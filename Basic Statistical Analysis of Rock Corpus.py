# -*- coding: utf-8 -*-
"""Copy of Python Code for Rock Corpus Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EDjFqOCxsdy4WUKsuJVPdGs3LUVh9nQu

#Import the Corpus
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
big_frame = pd.read_excel('Expanded Rock Corpus.xlsx', index_col=0)

big_frame

analysis_dates = big_frame[['Date','Harmonic Analysis']].to_numpy()

analysis = big_frame['Harmonic Analysis'].to_numpy()

date = big_frame[['Date']].to_numpy()

analyses_Copy = analysis

for i in range(len(analyses_Copy)):
  analyses_Copy[i] = analyses_Copy[i].replace("[C]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[C#]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[Db]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[D]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[Eb]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[E]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[F]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[F#]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[G]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[G#]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[Ab]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[A]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[A#]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[Bb]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[B]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[Gb]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("modulation", "")



  analyses_Copy[i] = analyses_Copy[i].replace("|", "")
  analyses_Copy[i] = analyses_Copy[i].replace(".", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[4/4]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[2/4]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[0]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[R]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[12/8]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[7/8]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("R", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[3/4]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[6/8]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("[5/4]", "")
  analyses_Copy[i] = analyses_Copy[i].replace("Warning: 'Vr5' is defined but never used", "")
  analyses_Copy[i] = analyses_Copy[i].replace("Warning: 'Ch5' is defined but never used", "")

  analyses_Copy[i] = analyses_Copy[i].split()

analyses_Copy

#make numpy arrays for each decade

df_1940s = []
df_1950s = []
df_1960s = []
df_1960s = []
df_1970s = []
df_1980s = []
df_1990s = []
df_2000s = []

for i in range(analysis_dates.shape[0]):
  if(1940 <= analysis_dates[i,0] < 1950):
    df_1940s.append(analyses_Copy[i])

  if(1950 <= analysis_dates[i,0] < 1960):
    df_1950s.append(analyses_Copy[i])

  if(1960 <= analysis_dates[i,0] < 1970):
    df_1960s.append(analyses_Copy[i])

  if(1970 <= analysis_dates[i,0] < 1980):
    df_1970s.append(analyses_Copy[i])

  if(1980 <= analysis_dates[i,0] < 1990):
    df_1980s.append(analyses_Copy[i])

  if(1990 <= analysis_dates[i,0] < 2000):
    df_1990s.append(analyses_Copy[i])

  if(2000 <= analysis_dates[i,0]):
    df_2000s.append(analyses_Copy[i])

"""#Determine frequency counts of symbols and build dictionary to replace on top 50 or so...."""

from collections import Counter

c = Counter()

for d in analyses_Copy: #***
  c.update(d)

# for k, v in c.items():
#   print(f'{k} = {v}')

#create lists of chords that are on each chromatic root

zero = ['I', 'I7', 'I6', 'V7/IV', 'i', 'i6', 'I64', 'Va/IV', 'Isus4', 'Id7', 'V42/IV', 'i7', 'V11/IV', 'ii7/bVII', 'Id7#9', 'Isus2', 'I42', 'i42', 'Id42',  'V/IV', 'I#9', 'I9', 'i64']
one = ['bII', 'bIId7', 'viio/ii', 'bII7']
two = [ 'V7/V', 'II', 'V/V', 'ii', 'ii7', 'II7', 'IId7', 'ii65', 'iio6', 'ii11', 'V6/V', 'II65', 'ii64', 'iis4', 'ii42', 'II9', 'V/v', 'II11', 'iih43', 'iih42', 'ii9']
three = ['bIII', 'bVId7/V', 'biii7', 'biii', 'bIII7', 'bIII64',  'V/bVI', 'V42/bVI', 'bIII6']
four = ['V/VI', 'iii', 'III', 'V/vi', 'V7/vi', 'III7', 'iii64', 'iii7', 'bIV', 'iii6', 'V6/vi', 'biv7', 'III64', 'iii43',  'Va7/vi',  'Va65/vi']
five = ['IV', 'IVd7', 'iv', 'IV9', 'IV64', 'IV6', 'IV7', 'iv7', 'iv6', 'Iv7', 'Iv', 'iV', 'IV42', 'bVb5', '#IV', 'IVsus4', 'IVssu4', 'IVssus4', 'iv64']
six = ['bV', 'viix7/V', 'viio/V', 'viix43/V', 'bV7', 'bVd42', 'viix42/V', 'V/VII', 'V42/VII', 'bv', 'V+11', 'v64']
seven = ['V', 'V7', 'V7s4', 'V64', 'V7sus4', 'V43', 'v', 'V13', 'V6', 'v7', 'Vs4', 'V11', 'Vsus4', 'iv/ii', 'V42', 'V65', 'V9', 'v6', 'v9', 'v7s4',  'iv6/ii']
eight = ['bVI', 'bVI7', 'bVId7', 'bVi7', 'bvi', 'bVI6', 'bVIb5', 'bVi', 'bVIs4', 'V7/bII', 'viix7/vi']
nine = ['vi7','vi', 'VI', 'V/ii', 'VI7', 'V7/ii', 'V7/ii', 'V43/ii', 'vi6', 'VId7', 'vi64', 'V6/ii', 'vi42', 'vih7', 'VI6', 'VI9', 'ii/IV']
ten = ['bVII', 'bVII7', 'bVIId7', 'bVId7/ii', '#VI', 'bvii', 'ii7/bVII', 'bViI', 'bVI64/ii', 'V7/bIII', 'bVII64', 'bVII6', 'bVII9', 'bvii7',  'IV/IV']
eleven = ['V7/iii', 'VII', 'vii', 'viix43', 'VII7', 'iih7/vi', 'ii7/vi', 'viix42', 'V7/III', 'vii7', 'VII9', 'V/iii', 'viix7', 'viio6', 'vii64']

dictionary_of_chords_and_counts = dict(c)
dictionary_of_chords_and_counts

from itertools import chain
from collections import Counter
import operator

chord_counts_dict = dict(Counter(chain.from_iterable(analyses_Copy))) #***

print(chord_counts_dict)


most_frequent_chords = sorted(chord_counts_dict, key=chord_counts_dict.get, reverse=True)

top_20_chords = most_frequent_chords[0:20]
top_10_chords = most_frequent_chords[0:10]


top_20_chord_dic = dict((k, chord_counts_dict[k]) for k in top_20_chords)
top_10_chord_dic = dict((k, chord_counts_dict[k]) for k in top_10_chords)

"""#Create Histogram of Top Chords"""

import matplotlib.pyplot as plt

plt.bar(list(top_20_chord_dic.keys()), top_20_chord_dic.values(), color='g')

plt.title("Frequency of Top 20 Chords")
plt.show()

from itertools import chain
from collections import Counter
import operator


#counts chords in analyses_Copy
chord_counts_dict = dict(Counter(chain.from_iterable(analyses_Copy)))

print(chord_counts_dict)


most_frequent_chords = sorted(chord_counts_dict, key=chord_counts_dict.get, reverse=True)

print(len(most_frequent_chords))

top_50_chords = most_frequent_chords[0:50]
# top_50_chords

chromatic_roots_maj = ['I', 'bII', 'II', 'bIII', 'III', 'IV', 'bV', 'V', 'bVI', 'VI', 'bVII', 'VII']
chromatic_roots_counts_maj = []

chromatic_roots_min = ['i', 'bii', 'biii', 'iii', 'iv', 'bv', 'v', 'bvi', 'vi', 'bvii', 'vii']
chromatic_roots_counts_min = []

#counts instances of chords from chord_counts_dict
for i in range(len(chromatic_roots_maj)):
  chromatic_roots_counts_maj.append(chord_counts_dict[chromatic_roots_maj[i]])

#count number of chromatic roots

zero_counts = []
one_counts = []
two_counts = []
three_counts = []
four_counts = []
five_counts = []
six_counts = []
seven_counts = []
eight_counts = []
nine_counts = []
ten_counts = []
eleven_counts = []

for i in zero:
  zero_counts.append(dictionary_of_chords_and_counts[i])

for i in one:
  one_counts.append(dictionary_of_chords_and_counts[i])

for i in two:
  two_counts.append(dictionary_of_chords_and_counts[i])

for i in three:
  three_counts.append(dictionary_of_chords_and_counts[i])

for i in four:
  four_counts.append(dictionary_of_chords_and_counts[i])

for i in five:
  five_counts.append(dictionary_of_chords_and_counts[i])

for i in six:
  six_counts.append(dictionary_of_chords_and_counts[i])

for i in seven:
  seven_counts.append(dictionary_of_chords_and_counts[i])

for i in eight:
  eight_counts.append(dictionary_of_chords_and_counts[i])

for i in nine:
  nine_counts.append(dictionary_of_chords_and_counts[i])

for i in ten:
  ten_counts.append(dictionary_of_chords_and_counts[i])

for i in eleven:
  eleven_counts.append(dictionary_of_chords_and_counts[i])

zeros = sum(zero_counts)
ones = sum(one_counts)
twos = sum(two_counts)
threes = sum(three_counts)
fours = sum(four_counts)
fives = sum(five_counts)
sixes = sum(six_counts)
sevens = sum(seven_counts)
eights = sum(eight_counts)
nines = sum(nine_counts)
tens = sum(ten_counts)
elevens = sum(eleven_counts)



total_chromatic_roots = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven']

total_chromatic_roots_counts = []
total_chromatic_roots_counts.append(zeros)
total_chromatic_roots_counts.append(ones)
total_chromatic_roots_counts.append(twos)
total_chromatic_roots_counts.append(threes)
total_chromatic_roots_counts.append(fours)
total_chromatic_roots_counts.append(fives)
total_chromatic_roots_counts.append(sixes)
total_chromatic_roots_counts.append(sevens)
total_chromatic_roots_counts.append(eights)
total_chromatic_roots_counts.append(nines)
total_chromatic_roots_counts.append(tens)
total_chromatic_roots_counts.append(elevens)

total_chromatic_roots_counts

total_chromatic_roots

chromatic_roots_counts_maj

TandDC = [3058, 46, 336, 240, 174, 2104, 23, 1516, 372, 674, 748, 38]


plt.bar(total_chromatic_roots, total_chromatic_roots_counts, color='g')
plt.title("Frequency of Chromatic Roots in Expanded Rock Corpus")
plt.show()

plt.bar(chromatic_roots_maj, TandDC, color='b')
plt.title("Frequency of Chromatic Roots in TDC Rock Corpus")
plt.show()

"""#Bar Graph of number of unique chords in songs by decade - NOT CHROMATIC"""

#get top 10 overall chords in corpus
top_10_chord_dic
top_10_chords

from itertools import chain
from collections import Counter
import operator


#******* --> go through each df_1990s and get number of times one of the top 10 overall chords occurs



decades = [df_1940s, df_1950s, df_1960s, df_1970s, df_1980s, df_1990s, df_2000s]

dec = ['1940s', '1950s', '1960s', '1970s', '1980s', '1990s', '2000s']


count = [0,0,0,0,0,0,0,0,0,0]



for i in range(len(decades)):
  count = [0,0,0,0,0,0,0,0,0,0]

  for j in range(len(decades[i])):
    for k in range(len(decades[i][j])):

      if(decades[i][j][k] == 'I'):
        count[0] = count[0] + 1

      if(decades[i][j][k] == 'IV'):
        count[1] = count[1] + 1

      if(decades[i][j][k] == 'V'):
        count[2] = count[2] + 1

      if(decades[i][j][k] == 'bVII'):
        count[3] = count[3] + 1

      if(decades[i][j][k] == 'VI'):
        count[4] = count[4] + 1

      if(decades[i][j][k] == 'II'):
        count[5] = count[5] + 1

      if(decades[i][j][k] == 'III'):
        count[6] = count[6] + 1

      if(decades[i][j][k] == 'bVI'):
        count[7] = count[7] + 1

      if(decades[i][j][k] == 'bIII'):
        count[8] = count[8] + 1

      if(decades[i][j][k] == 'VII'):
        count[9] = count[9] + 1

  plt.bar(top_10_chords, count, color='g')

  plt.title("Frequency of Top 10 Chord in the " + dec[i])
  plt.show()

count_40 = [0,0,0,0,0,0,0,0,0,0]
count_50 = [0,0,0,0,0,0,0,0,0,0]
count_60 = [0,0,0,0,0,0,0,0,0,0]
count_70 = [0,0,0,0,0,0,0,0,0,0]
count_80 = [0,0,0,0,0,0,0,0,0,0]
count_90 = [0,0,0,0,0,0,0,0,0,0]
count_20 = [0,0,0,0,0,0,0,0,0,0]

count = [count_40, count_50, count_60, count_70, count_80, count_90, count_20]

decades = [df_1940s, df_1950s, df_1960s, df_1970s, df_1980s, df_1990s, df_2000s]

dec = ['1940s', '1950s', '1960s', '1970s', '1980s', '1990s', '2000s']


for i in range(len(decades)):
  for j in range(len(decades[i])):
    for k in range(len(decades[i][j])):

      if(decades[i][j][k] == 'I'):
        count[i][0] = count[i][0] + 1

      if(decades[i][j][k] == 'IV'):
        count[i][1] = count[i][1] + 1

      if(decades[i][j][k] == 'V'):
        count[i][2] = count[i][2] + 1

      if(decades[i][j][k] == 'bVII'):
        count[i][3] = count[i][3] + 1

      if(decades[i][j][k] == 'VI'):
        count[i][4] = count[i][4] + 1

      if(decades[i][j][k] == 'II'):
        count[i][5] = count[i][5] + 1

      if(decades[i][j][k] == 'III'):
        count[i][6] = count[i][6] + 1

      if(decades[i][j][k] == 'bVI'):
        count[i][7] = count[i][7] + 1

      if(decades[i][j][k] == 'bIII'):
        count[i][8] = count[i][8] + 1

      if(decades[i][j][k] == 'VII'):
        count[i][9] = count[i][9] + 1


for i in range(len(count)):
  print(count[i])

total_1940s = sum(count_40)
total_1950s = sum(count_50)
total_1960s = sum(count_60)
total_1970s = sum(count_70)
total_1980s = sum(count_80)
total_1990s = sum(count_90)
total_2000s = sum(count_20)


count = [count_40, count_50, count_60, count_70, count_80, count_90, count_20]
totals = [total_1940s, total_1950s, total_1960s, total_1970s, total_1980s, total_1990s, total_2000s]
percentages = []


for i in range(len(count)):
  for j in range(len(count[i])):
    count[i][j] = count[i][j] / totals[i]

for i in range(len(count)):
  for j in range(len(count[i])):
    count[i][j] = count[i][j]*100

count

for i in range(len(count)):

  plt.bar(top_10_chords, count[i], color='g')
  plt.title("Percentages of Top 10 Chord of: " + dec[i])
  plt.show()

import numpy as np

def euclidean(v1, v2):
    return sum((p-q)**2 for p, q in zip(v1, v2))/10 ** .5


euclid_dist_matrix = np.zeros((7,7))

for i in range(len(count)):
  for j in range(len(count)):
    if(i!=j):
      euclid_dist_matrix[i][j] = euclidean(count[i], count[j])


euclid_dist_matrix

import seaborn as sns
import matplotlib.pyplot as plt

ax = sns.heatmap(euclid_dist_matrix, annot=True, xticklabels=dec, yticklabels=dec, vmin=0, vmax=500, fmt='.3g')

plt.title("Euclidean Distance Between Histograms of Top 10 Chords in each Decade")
plt.show()

cg = sns.clustermap(euclid_dist_matrix, annot=True, xticklabels=dec, yticklabels=dec, vmin=0, vmax=500, fmt='.3g')

plt.title("Clustermap of Similarity of Top 10 Chords in Corpus by Decade based on Euclidean Distance between Histograms")

"""#Chord Transition Matrix in Expanded Rock Corpus"""

analyses_Copy_original = analyses_Copy

"""NLPTK to check if certain bigrams occur..."""

#Create a copy of analysis_Copy that just uses chromatic roots --> calculate bigrams and trigrams from this
# ***** this will convert analyses_Copy to a list of chromatic numbers *****

for i in range(analyses_Copy.shape[0]):
  for j in range(len(analyses_Copy[i])):
    if analyses_Copy[i][j] in zero:
      analyses_Copy[i][j] = 'I'
    if analyses_Copy[i][j] in one:
      analyses_Copy[i][j] = 'bII'
    if analyses_Copy[i][j] in two:
      analyses_Copy[i][j] = 'II'
    if analyses_Copy[i][j] in three:
      analyses_Copy[i][j] = 'bIII'
    if analyses_Copy[i][j] in four:
      analyses_Copy[i][j] = 'III'
    if analyses_Copy[i][j] in five:
      analyses_Copy[i][j] = 'IV'
    if analyses_Copy[i][j] in six:
      analyses_Copy[i][j] = 'bV'
    if analyses_Copy[i][j] in seven:
      analyses_Copy[i][j] = 'V'
    if analyses_Copy[i][j] in eight:
      analyses_Copy[i][j] = 'bVI'
    if analyses_Copy[i][j] in nine:
      analyses_Copy[i][j] = 'VI'
    if analyses_Copy[i][j] in ten:
      analyses_Copy[i][j] = 'bVII'
    if analyses_Copy[i][j] in eleven:
      analyses_Copy[i][j] = 'VII'

from nltk import bigrams
from collections import Counter

bgrms = []

for i in range(analyses_Copy.shape[0]):
  bgrms.append(list(bigrams(analyses_Copy[i])))

bgrms

import itertools

all_chromatic_bigrams = list(itertools.permutations(('I', 'bII', 'II', 'bIII', 'III', 'IV', 'bV', 'V', 'bVI', 'VI', 'bVII', 'VII'), 2))
all_chromatic_bigrams

import numpy as np
import operator
import itertools

Ant_Cons = pd.DataFrame(np.zeros((12,12)), columns = chromatic_roots_maj)
Ant_Cons.set_axis(chromatic_roots_maj, axis='index')

#create dictionary to store counts of bigrams
keyList = all_chromatic_bigrams
# Using Dictionary comprehension
bigram_count = {key: 0 for key in keyList}
print(bigram_count)


#sets the key = 0 for all chromatic bigrams

for i in range(len(bgrms)):
  for j in range(len(bgrms[i])):
    for k in range(len(all_chromatic_bigrams)):
      if(bgrms[i][j] == all_chromatic_bigrams[k]):
        bigram_count[all_chromatic_bigrams[k]] += 1

bigram_count

#counts of chroamtic bigrams

names = ['I', 'bII', 'II', 'bIII', 'III', 'IV', 'bV', 'V', 'bVI', 'VI', 'bVII',
       'VII']
numbers = [0,1,2,3,4,5,6,7,8,9,10,11]

dic = dict(zip(names, numbers))
dic

list(bigram_count.keys())[0][0]

for i in range(len(all_chromatic_bigrams)):
  Ant_Cons.at[dic.get(list(bigram_count.keys())[i][0]), list(bigram_count.keys())[i][1]] = bigram_count.get(list(bigram_count.keys())[i])

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
# %matplotlib inline

plt.figure(figsize=(15,15))
sns.heatmap(Ant_Cons, annot=True, fmt='g')
sns.heatmap(Ant_Cons, xticklabels=names, yticklabels=names)
plt.title('Chord Transitions in the Expanded Rock Corpus: (Rows --> Columns)')

"""#Got top bigrams to create tornado charts in excel"""

bigram_count

d = Counter (bigram_count)
total = sum(d.values())
d.most_common()

print('Total Number of Bigrams:', total)
for k, v in d.most_common(10):
  print('%s: %i' % (k, v))

bigram_count[('II', 'I')]

x = range(5)

top_bigram = ['I - IV', 'I - V', 'I - bVII', 'I - VI', 'I - II']
positive_data = [4813/37254, 2384/37254, 1513/37254, 1041/37254, 817/37254]
negative_data = [-4995/37254, -3324/37254, -1294/37254, -492/37254, -608/37254]

fig = plt.figure()
ax = plt.subplot(111)
ax.bar(x, negative_data, width=1, color='r')
ax.bar(x, positive_data, width=1, color='b')

plt.xticks(ticks = [0,1,2,3,4], labels = top_bigram, rotation = 'vertical')

plt.title('Percentage of Most Common Chromatic Bigrams - (37,254 Total Occurences)')
plt.xlabel('Bigrams')
plt.ylabel('Percentage of Total')

colors = {'Foward':'blue', 'Backward':'Red'}
labels = list(colors.keys())
handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]
plt.legend(handles, labels)

plt.show()

"""#Group data from each songs into segments of trigrams --> nested array

"""

# all_trigrams = []

# for i in range(len(analyses_Copy)):
#   for j in range(len(analyses_Copy[i])-3):
#     all_trigrams.append(analyses_Copy[i][j:j+3])

# all_trigrams

from nltk import trigrams
from collections import Counter

trigrms = []

for i in range(analyses_Copy.shape[0]):
  trigrms.append(list(trigrams(analyses_Copy[i])))

trigrms

all_chromatic_trigrams = list(itertools.permutations(('I', 'bII', 'II', 'bIII', 'III', 'IV', 'bV', 'V', 'bVI', 'VI', 'bVII', 'VII'), 3))
all_chromatic_trigrams

#create dictionary to store counts of bigrams
keylist = all_chromatic_trigrams
# Using Dictionary comprehension
trigram_count = {key: 0 for key in keylist}
print(trigram_count)

for i in range(len(trigrms)):
  for j in range(len(trigrms[i])):
    for k in range(len(all_chromatic_trigrams)):
      if(trigrms[i][j] == all_chromatic_trigrams[k]):
        trigram_count[all_chromatic_trigrams[k]] += 1

trigram_count

import heapq
top_trigrams = heapq.nlargest(20, trigram_count, key=trigram_count.get)
top_trigrams

top_trigrams_list = []

for i in range(len(top_trigrams)):
  top_trigrams_list.append(str(top_trigrams[i]))

import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure(figsize = (10, 5))

# creating the bar plot
plt.bar(top_trigrams_list, top_trigram_counts, color ='g',
        width = 0.4)

plt.xlabel("Top 20 Trigrams")
plt.ylabel("Frequency")
plt.title("Frequency of Top 20 Trigrams of Chromatic Roots")
plt.xticks(rotation='vertical')
plt.show()

"""#Get Histograms of Occurences of Chords / Bigrams for Each Decade --> Clustering to Produce Histograms and track historical trends

#*** Everything Below is Chord Vectors****

#Correlation between chord vectors of all works
"""

if('V' in analyses_Copy[1]):
  print("yes")

chromatic_roots_maj = ['I', 'bII', 'II', 'bIII', 'III', 'IV', 'bV', 'V', 'bVI', 'VI', 'bVII', 'VII']

I = np.zeros(436)
bII = np.zeros(436)
II = np.zeros(436)
bIII = np.zeros(436)
III = np.zeros(436)
IV = np.zeros(436)
bV = np.zeros(436)
V = np.zeros(436)
bVI = np.zeros(436)
VI = np.zeros(436)
bVII = np.zeros(436)
VII = np.zeros(436)

for i in range(analyses_Copy.shape[0]):
  if('I' in analyses_Copy[i]):
    I[i] = 1
  if('bII' in analyses_Copy[i]):
    bII[i] = 1
  if('II' in analyses_Copy[i]):
    II[i] = 1
  if('bIII' in analyses_Copy[i]):
    bIII[i] = 1
  if('III' in analyses_Copy[i]):
    III[i] = 1
  if('IV' in analyses_Copy[i]):
    IV[i] = 1
  if('bV' in analyses_Copy[i]):
    bV[i] = 1
  if('V' in analyses_Copy[i]):
    V[i] = 1
  if('bVI' in analyses_Copy[i]):
    bVI[i] = 1
  if('VI' in analyses_Copy[i]):
    VI[i] = 1
  if('bVII' in analyses_Copy[i]):
    bVII[i] = 1
  if('VII' in analyses_Copy[i]):
    VII[i] = 1

from string import ascii_letters
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sns.set_theme(style="white")
d = pd.DataFrame({'I' : I, 'bII': bII, 'II':II, 'bIII':bIII, 'III':III, 'IV':IV, 'bV':bV, 'V':V, 'bVI':bVI, 'VI':VI, 'bVII':bVII, 'VII':VII})

# Compute the correlation matrix
corr = d.corr()
# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=bool))
# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))
# Generate a custom diverging colormap
cmap = sns.diverging_palette(230, 20, as_cmap=True)
# Draw the heatmap with the mask and correct aspect ratio

corr = corr.replace(np.nan, 0)

sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})
plt.title('Correlation between Chromatic Roots vectors (1940-2000)')

cg = sns.clustermap(corr, annot=True, xticklabels=chromatic_roots_maj, yticklabels=chromatic_roots_maj, vmin=-1, vmax=1, fmt='.3g')

plt.title("Clustermap Between the Chromatic Chord Vectors")

# dates